import os
import sys

config_file = 'scCut-Tag_2020/config/config.yaml' 
configfile: config_file


shell.executable("/bin/bash")
shell.prefix("source ~/.bashrc; conda activate " + config['general']['conda_env']  + " ; ")


samples_list    = [x for x in config['samples']]
antibody_list   = [config['samples'][x]['Antibody'] for x in config['samples'].keys()]

# print(antibody_list)



# Create antibody: path to cellranger mapping for expand
d = {config['samples'][x]['Antibody']: [] for x in config['samples'].keys()}
for x in config['samples'].keys():
   d[config['samples'][x]['Antibody']].append(config['samples'][x]['cellranger_out'])




rule all:
  input:
		# Bigwig files of raw mapped reads 
    expand("results/{sample}/bigwig/all_reads.bw",sample = samples_list),

		# MACS2 peak calling 
    expand("results/{sample}/macs/narrow/{sample}_peaks.narrowPeak",sample = samples_list),
    expand("results/{sample}/macs/broad/{sample}_peaks.broadPeak",sample = samples_list),

    # Merged files accross replicates
    expand("results/merged/{antibody}/possorted_bam.bam", antibody = list(set(antibody_list))),
    expand("results/{sample}/outs/fragments.tsv.gz", antibody = list(set(antibody_list)),sample=samples_list),

    # Barcode statistics for cell selection
    expand("results/{sample}/barcode_statistics/all_barcodes.txt",sample = samples_list),
    expand("results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",sample = samples_list),
    expand("results/{sample}/barcode_statistics/peaks_barcodes_broad.txt",sample = samples_list),
    #Clustering
    expand("results/{sample}/cell_picking/{binwidth}/Seurat_object.Rds",binwidth = config['general']['clustering_window'],sample = samples_list)



rule bam_to_bw:
    input:
        lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/bigwig/all_reads.bw"
    threads: 8
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "bamCoverage -b {input} -o {output} -p {threads} --minMappingQuality 5 "
        " --binSize 100 --centerReads --smoothLength 500 --normalizeUsing RPKM --ignoreDuplicates"

rule run_macs_narrow:
    input:
       lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/macs/narrow/{sample}_peaks.narrowPeak"
    params:
        macs_outdir = "results/{sample}/macs/narrow"
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "macs2 callpeak -t {input} -g mm -f BAMPE -n {wildcards.sample} "
        "--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 2>&1 "
        

rule run_macs_broad:
    input:
        lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/macs/broad/{sample}_peaks.broadPeak"
    params:
        macs_outdir = "results/{sample}/macs/broad"
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "macs2 callpeak -t {input} -g mm -f BAMPE -n {wildcards.sample} "
        "--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 --broad-cutoff=0.1 --broad 2>&1 "

rule barcode_statistics_peaks:
    input:
        bam          = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
        peaks_broad  = "results/{sample}/macs/broad/{sample}_peaks.broadPeak",
        peaks_narrow = "results/{sample}/macs/narrow/{sample}_peaks.narrowPeak"
    output:
        narrow = "results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",
        broad  = "results/{sample}/barcode_statistics/peaks_barcodes_broad.txt"
    params:
        scripts    = os.path.dirname(workflow.basedir) + '/scripts',

    conda: '../envs/CT_snakemake.yaml'
    shell:
        "set +o pipefail; "
        "(bedtools intersect -abam {input.bam} -b {input.peaks_broad} -u | samtools view -f2 | "
        " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.broad} && "
        " bedtools intersect -abam {input.bam} -b {input.peaks_narrow} -u | samtools view -f2 | "
        " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.narrow} )"

rule barcode_statistics_all:
  input:
     bam       = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
  output:
    all_bcd    = "results/{sample}/barcode_statistics/all_barcodes.txt"
  params:
    scripts    = os.path.dirname(workflow.basedir) + '/scripts',
  shell:
    " set +o pipefail; "
    " samtools view -f2 {input.bam}| "
    " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.all_bcd} "

rule merge_bam:
    input:
        lambda wildcards: [x + '/outs/possorted_bam.bam' for x in d[wildcards.antibody] ]
    output:
        "results/merged/{antibody}/possorted_bam.bam"
    conda: '../envs/CT_snakemake.yaml'
    threads: 8
    shell:
        "samtools merge --threads {threads} {output} {input}" 

rule add_barcode_fragments:
    input:
        fragments = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/fragments.tsv.gz'
    output:
        fragments = "results/{sample}/outs/fragments.tsv.gz",
        index.    = "results/{sample}/outs/fragments.tsv.gz.tbi"
    conda: '../envs/CT_snakemake.yaml'
    params:
        script         = os.path.dirname(workflow.basedir) + '/scripts/add_sample_to_fragments.py',
        sample         = '{sample}'
    shell:
        "set +o pipefail; "
        "python3 {params.script} {input.fragments} {params.sample} | bgzip > {output.fragments}; "
        "tabix -p bed {output.fragments}"

rule cell_selection:
  input:
      all_bcd    = "results/{sample}/barcode_statistics/all_barcodes.txt",
      bcd_narrow = "results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",
      bcd_broad  = "results/{sample}/barcode_statistics/peaks_barcodes_broad.txt",
      peaks      = "results/{sample}/macs/broad/{sample}_peaks.broadPeak",
      metadata   = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/singlecell.csv',
      fragments  = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/fragments.tsv.gz',
      
      
  output:
      "results/{sample}/cell_picking/{binwidth}/cells_10x.png",
      "results/{sample}/cell_picking/{binwidth}/cells_picked.png",
      "results/{sample}/cell_picking/{binwidth}/cells_picked.bw",
      "results/{sample}/cell_picking/{binwidth}/cells_not_picked.bw",
      "results/{sample}/cell_picking/{binwidth}/Seurat_object.Rds",
      
  conda: '../envs/CT_snakemake.yaml'
  params:
      script         = os.path.dirname(workflow.basedir) + '/scripts/R/process_cellranger.R',
      binwidth       = "{binwidth}",
      out_prefix     = "results/{sample}/cell_picking/{binwidth}/",
      config_file    = config_file,
      sample         = "{sample}"
  shell:
      "echo $PATH; "
      "which R; "
      "Rscript {params.script}  --sample {params.sample} --config {params.config_file} --out_prefix {params.out_prefix} --window {params.binwidth}"






























