import os
import sys

config_file = os.path.dirname(workflow.basedir) + '/config/config.yaml' 
configfile: config_file


shell.executable("/bin/bash")
shell.prefix("source ~/.bashrc; conda activate " + config['general']['conda_env']  + " ; ")

CWD = os.getcwd()
#print('working dir is:' + CWD)

samples_list    = [x for x in config['samples']]
samples_dict    = {x: config['samples'][x]['Antibody'] for x in config['samples'].keys()}

antibody_list   = [config['samples'][x]['Antibody'] for x in config['samples'].keys()]


# Create antibody: path to cellranger mapping for expand
d = {config['samples'][x]['Antibody']: [] for x in config['samples'].keys()}
for x in config['samples'].keys():
   d[config['samples'][x]['Antibody']].append(config['samples'][x]['cellranger_out'])




rule all:
  input:
		# Bigwig files of raw mapped reads 
    expand("results/{sample}/bigwig/all_reads.bw",sample = samples_list),

		# MACS2 peak calling 
    expand("results/{sample}/macs/narrow/{sample}_peaks.narrowPeak",sample = samples_list),
    expand("results/{sample}/macs/broad/{sample}_peaks.broadPeak",sample = samples_list),

    # Merged files accross replicates
    #expand("results/merged/{antibody}/possorted_bam.bam", antibody = list(set(antibody_list))),
    expand("results/{sample}/outs/fragments.tsv.gz", antibody = list(set(antibody_list)),sample=samples_list),

    # Barcode statistics for cell selection
    expand("results/{sample}/barcode_statistics/all_barcodes.txt",sample = samples_list),
    expand("results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",sample = samples_list),
    expand("results/{sample}/barcode_statistics/peaks_barcodes_broad.txt",sample = samples_list),
    #Clustering
    expand("results/{sample}/cell_picking/{binwidth}/Seurat_object.Rds",binwidth = config['general']['clustering_window'], sample = samples_list),

    # RNA-seq clustering
    #'results/Sten_RNA/01.clustering.html',
    'results/Sox10_RNA/01.clustering.html',

    # Clustering final
    expand("results/{antibody}/clustering/01.clustering.html", antibody = ['H3K27me3','H3K4me3',"H3K27ac"]), # ,antibody = antibody_list)
    expand("results/{antibody}/clustering/metagene/metagene.txt.gz",antibody = ['H3K27me3','H3K4me3',"H3K27ac"]),
    expand("results/{antibody}/clustering/metagene/metagene_plot.png",antibody = ['H3K27me3','H3K4me3',"H3K27ac"]),

    # Export bam per cluster
    expand(directory('results/{sample}/outs/per_cluster/sam_files/'), sample = ["H3K27ac_N1","H3K27ac_N2"]),
    directory('results/scATAC_P50/'),


rule bam_to_bw:
    input:
        lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/bigwig/all_reads.bw"
    threads: 8
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "bamCoverage -b {input} -o {output} -p {threads} --minMappingQuality 5 "
        " --binSize 100 --centerReads --smoothLength 500 --normalizeUsing RPKM --ignoreDuplicates"

rule run_macs_narrow:
    input:
       lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/macs/narrow/{sample}_peaks.narrowPeak"
    params:
        macs_outdir = "results/{sample}/macs/narrow"
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "macs2 callpeak -t {input} -g mm -f BAMPE -n {wildcards.sample} "
        "--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 2>&1 "
        

rule run_macs_broad:
    input:
        lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
    output:
        "results/{sample}/macs/broad/{sample}_peaks.broadPeak"
    params:
        macs_outdir = "results/{sample}/macs/broad"
    conda: '../envs/CT_snakemake.yaml'
    shell:
        "macs2 callpeak -t {input} -g mm -f BAMPE -n {wildcards.sample} "
        "--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 --broad-cutoff=0.1 --broad 2>&1 "

rule barcode_statistics_peaks:
    input:
        bam          = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
        peaks_broad  = "results/{sample}/macs/broad/{sample}_peaks.broadPeak",
        peaks_narrow = "results/{sample}/macs/narrow/{sample}_peaks.narrowPeak"
    output:
        narrow = "results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",
        broad  = "results/{sample}/barcode_statistics/peaks_barcodes_broad.txt"
    params:
        scripts    = os.path.dirname(workflow.basedir) + '/scripts',

    conda: '../envs/CT_snakemake.yaml'
    shell:
        "set +o pipefail; "
        "(bedtools intersect -abam {input.bam} -b {input.peaks_broad} -u | samtools view -f2 | "
        " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.broad} && "
        " bedtools intersect -abam {input.bam} -b {input.peaks_narrow} -u | samtools view -f2 | "
        " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.narrow} )"

rule barcode_statistics_all:
  input:
     bam       = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
  output:
    all_bcd    = "results/{sample}/barcode_statistics/all_barcodes.txt"
  params:
    scripts    = os.path.dirname(workflow.basedir) + '/scripts',
  shell:
    " set +o pipefail; "
    " samtools view -f2 {input.bam}| "
    " awk -f {params.scripts}/get_cell_barcode.awk | sed 's/CB:Z://g' | sort | uniq -c > {output.all_bcd} "

rule merge_bam:
    input:
        lambda wildcards: [x + '/outs/possorted_bam.bam' for x in d[wildcards.antibody] ]
    output:
        "results/merged/{antibody}/possorted_bam.bam"
    conda: '../envs/CT_snakemake.yaml'
    threads: 8
    shell:
        "samtools merge --threads {threads} {output} {input}" 

rule add_barcode_fragments:
    input:
        fragments = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/fragments.tsv.gz'
    output:
        fragments = "results/{sample}/outs/fragments.tsv.gz",
        index     = "results/{sample}/outs/fragments.tsv.gz.tbi"
    conda: '../envs/CT_snakemake.yaml'
    params:
        script         = os.path.dirname(workflow.basedir) + '/scripts/add_sample_to_fragments.py',
        sample         = '{sample}'
    shell:
        "set +o pipefail; "
        "python3 {params.script} {input.fragments} {params.sample} | bgzip > {output.fragments}; "
        "tabix -p bed {output.fragments}"

rule cell_selection:
  input:
      all_bcd    = "results/{sample}/barcode_statistics/all_barcodes.txt",
      bcd_narrow = "results/{sample}/barcode_statistics/peaks_barcodes_narrow.txt",
      bcd_broad  = "results/{sample}/barcode_statistics/peaks_barcodes_broad.txt",
      peaks      = "results/{sample}/macs/broad/{sample}_peaks.broadPeak",
      metadata   = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/singlecell.csv',
      fragments  = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/fragments.tsv.gz',
      
      
  output:
      "results/{sample}/cell_picking/{binwidth}/cells_10x.png",
      "results/{sample}/cell_picking/{binwidth}/cells_picked.png",
      "results/{sample}/cell_picking/{binwidth}/cells_picked.bw",
      "results/{sample}/cell_picking/{binwidth}/cells_not_picked.bw",
      "results/{sample}/cell_picking/{binwidth}/Seurat_object.Rds",
      
  conda: '../envs/CT_snakemake.yaml'
  params:
      script         = os.path.dirname(workflow.basedir) + '/scripts/R/process_cellranger.R',
      binwidth       = "{binwidth}",
      out_prefix     = "results/{sample}/cell_picking/{binwidth}/",
      config_file    = config_file,
      sample         = "{sample}"
  shell:
      "Rscript {params.script}  --sample {params.sample} --config {params.config_file} --out_prefix {params.out_prefix} --window {params.binwidth}"

rule clustering_final:
  input:
    lambda wildcards: expand("results/{sample}/cell_picking/5000/Seurat_object.Rds", sample = [x for x in samples_dict if samples_dict[x] == wildcards.antibody]),
    'results/Sten_RNA/clustering/sten_RNA_markers.csv',
    'results/Sox10_RNA/clustering/GFP/markers.csv'
  output:
    seurat  = "results/{antibody}/clustering/01.clustering.Rds",
    report  = "results/{antibody}/clustering/01.clustering.html",
    markers = "results/{antibody}/clustering/markers.csv",
    bigwig  = directory("results/{antibody}/clustering/bigwig/"),
    bed     = directory("results/{antibody}/clustering/markers_bed/")
  params:
    notebook       = os.path.dirname(workflow.basedir) + "/notebooks/{antibody}/{antibody}_clustering_merge.Rmd",
    config         = config_file,
    out_prefix     = CWD + '/results/',
    report         = CWD + '/results/{antibody}/clustering/01.clustering.html',
    antibody       = '{antibody}',
  shell:
    " Rscript -e \"rmarkdown::render(input='{params.notebook}',output_file = '{params.report}', params=list(config='{params.config}',out_prefix = '{params.out_prefix}',antibody = '{params.antibody}'))\" "

rule metagene:
  input:
    bw  = directory("results/{antibody}/clustering/bigwig/"),
    bed = directory("results/{antibody}/clustering/markers_bed/"),
  output:
    "results/{antibody}/clustering/metagene/metagene.txt.gz"
  threads: 8
  shell:
    "computeMatrix reference-point -S {input.bw}*.bw -R {input.bed}*.bed -o {output} -a 10000 -b 10000 -p {threads}"

rule plot_metagene:
  input: "results/{antibody}/clustering/metagene/metagene.txt.gz"
  output: "results/{antibody}/clustering/metagene/metagene_plot.png"
  shell: "plotHeatmap -m {input} -o {output} --sortRegions no --refPointLabel peak"

rule Sten_download:
  output:
    loom = config['RNA_seq']['Sten_RNA']['loom_file']
  params:
    download_folder = os.path.dirname(config['RNA_seq']['Sten_RNA']['loom_file']),
    loom_url        = config['RNA_seq']['Sten_RNA']['loom_source']
  shell:
    'wget {params.loom_url}  -P {params.download_folder}'
  

rule Sten_RNA_clustering:
  input:
    config['RNA_seq']['Sten_RNA']['loom_file']
  output:
    report      = 'results/Sten_RNA/01.clustering.html',
    R_object    = 'results/Sten_RNA/clustering/01.clustering_20000cells.Rds',
    markers     = 'results/Sten_RNA/clustering/sten_RNA_markers.csv'
  params:
    config      = config_file,
    notebook    = os.path.dirname(workflow.basedir) + '/notebooks/Sten_RNA/01.clustering.Rmd',
    out_prefix  = CWD + '/results/Sten_RNA/clustering/',
    report      = CWD + '/results/Sten_RNA/01.clustering.html',

  shell:
    "Rscript -e \"rmarkdown::render(input='{params.notebook}',output_file = '{params.report}', params=list(config='{params.config}',out_prefix = '{params.out_prefix}'))\""


rule Sox10_RNA_clustering:
  input:
    rep1 = config['RNA_seq']['Sox10_RNA']['replicate1'],
    rep2 = config['RNA_seq']['Sox10_RNA']['replicate2']
  output:
    report       = 'results/Sox10_RNA/01.clustering.html',
    R_object_all = 'results/Sox10_RNA/clustering/all_cells/01.clustering.Rds',
    markers_all  = 'results/Sox10_RNA/clustering/all_cells/markers.csv',
    heatmap_all  = 'results/Sox10_RNA/clustering/all_cells/heatmap.png',
    R_object_GFP = 'results/Sox10_RNA/clustering/GFP/01.clustering.Rds',
    markers_GFP  = 'results/Sox10_RNA/clustering/GFP/markers.csv',
    heatmap_GFP  = 'results/Sox10_RNA/clustering/GFP/heatmap.png',

  params: # Absolute paths here
    config       = config_file,
    notebook     = os.path.dirname(workflow.basedir) + '/notebooks/Sox10_RNA/01.clustering.Rmd',
    out_prefix   = CWD + '/results/Sox10_RNA/clustering/',
    report       = CWD + '/results/Sox10_RNA/01.clustering.html',


  shell:
    "Rscript -e \"rmarkdown::render(input='{params.notebook}',output_file = '{params.report}', params=list(config='{params.config}',out_prefix = '{params.out_prefix}'))\""

rule export_bam:
  input:
    seurat = "results/H3K27ac/clustering/01.clustering.Rds",
    bam    = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
  output:
    barcode_table = 'results/{sample}/outs/per_cluster/barcode_table.csv',
    sam_files     = directory('results/{sample}/outs/per_cluster/sam_files/'),
  params:
    export_table_script =   os.path.dirname(workflow.basedir) + "/scripts/R/export_barcode_cluster_table.R",
    filter_bam          =   os.path.dirname(workflow.basedir) + "/scripts/filter_bam_by_barcode.py",
    sample              =   "{sample}",
  shell:
    "Rscript {params.export_table_script} {input.seurat} {output.barcode_table}; "
    "python3 {params.filter_bam} {input.bam} {output.barcode_table} {params.sample} {output.sam_files};"
    "for file in `ls {output.sam_files}*.sam`; do samtools view -bS -h $file > ${file/.sam/.bam}; "
    "rm {output.sam_files}*.sam"


rule download_ATAC:
  params:
    data_url            = config['ATAC_seq']["P50"]["matrix_url"],
    h5_url              = config['ATAC_seq']["P50"]["matrix_h5_url"],
    metadata_url        = config['ATAC_seq']["P50"]["metadata_url"],
    fragments_url       = config['ATAC_seq']["P50"]["fragments_url"],
    fragments_index_url = config['ATAC_seq']["P50"]["fragments_index_url"],
  output:
    directory('results/scATAC_P50/data/')
  shell:
    "wget {params.data_url}            -P {output}; "
    "wget {params.h5_url}              -P {output}; "
    "wget {params.metadata_url}        -P {output}; "
    "wget {params.fragments_url}       -P {output}; "
    "wget {params.fragments_index_url} -P {output}; "
    "tar -xvf data/*.tar.gz; "

























